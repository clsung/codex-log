[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "codex-log"
version = "0.1.1"
description = "A Python CLI tool that converts Codex transcript JSONL files into readable HTML format"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Cheng-Lung Sung", email = "clsung@gmail.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Text Processing :: Markup :: HTML",
]
keywords = ["codex", "log", "converter", "html", "cli"]
requires-python = ">=3.8.1"

dependencies = [
    "jinja2~=3.1.2",
    "click~=8.1.7",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest~=7.4.3",
    "pytest-cov~=4.1.0",
    "pytest-mock~=3.11.1",
    "pytest-xdist~=3.3.1",
    "pytest-timeout~=2.1.0",
    
    # Advanced testing
    "pytest-benchmark~=4.0.0",
    "pytest-html~=4.1.1",
    "pytest-json-report~=1.5.0",
    
    # Property-based testing
    "hypothesis~=6.88.0",
    
    # Test data factories
    "factory-boy~=3.3.0",
    "psutil~=7.0.0",
    
    # Code quality
    "mypy~=1.5.1",
    "flake8>=6.0.0",
    "black~=23.7.0",
    "ruff~=0.1.3",
    
    # Security scanning
    "safety~=2.3.0",
    "bandit~=1.7.5",
    
    # Type checking enhancements
    "types-python-dateutil~=2.8.19",
]

[project.scripts]
codex-log = "codex_log.converter:main"

[tool.hatch.build.targets.wheel]
packages = ["codex_log"]

[project.urls]
Homepage = "https://github.com/clsung/codex-log"
Repository = "https://github.com/clsung/codex-log.git"
Issues = "https://github.com/clsung/codex-log/issues"

[tool.uv]
dev-dependencies = [
    # Testing framework
    "pytest~=7.4.3",
    "pytest-cov~=4.1.0",
    "pytest-mock~=3.11.1",
    "pytest-xdist~=3.3.1",
    "pytest-timeout~=2.1.0",
    
    # Advanced testing
    "pytest-benchmark~=4.0.0",
    "pytest-html~=4.1.1",
    "pytest-json-report~=1.5.0",
    
    # Property-based testing
    "hypothesis~=6.88.0",
    
    # Test data factories
    "factory-boy~=3.3.0",
    "psutil~=7.0.0",
    
    # Code quality
    "mypy~=1.5.1",
    "flake8>=6.0.0",
    "black~=23.7.0",
    "ruff~=0.1.3",
    
    # Security scanning
    "safety~=2.3.0",
    "bandit~=1.7.5",
    
    # Type checking enhancements
    "types-python-dateutil~=2.8.19",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--durations=10",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "cli: CLI interface tests",
    "slow: Tests that take a long time to run",
    "edge_case: Edge case and error handling tests",
    "parser: Tests for parsing functionality",
    "renderer: Tests for HTML rendering",
    "models: Tests for data models",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
minversion = "6.0"
timeout = 300

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.coverage.run]
source = ["codex_log"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
